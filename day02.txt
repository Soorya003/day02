1)write a blog on the difference between document and window objects
         Unveiling the Distinctions: 5 Key Differences Between Document and Window Objects in JavaScript

In the intricate world of JavaScript, two fundamental objects reign supreme: the Document and the Window objects. 
These entities are pivotal in shaping the interactive experiences we encounter while browsing the web. 
While they may seem similar at first glance, delving deeper reveals distinct roles and functionalities that set them apart. 
Let's explore the five key differences between the Document and Window objects, shedding light on their unique characteristics.

 1. Scope and Context:

The Document object encapsulates the entire HTML content of a web page. 
It represents the DOM (Document Object Model), providing a structured representation of the page's elements, such as `<div>`, `<p>`, `<span>`, and more. 
Essentially, it serves as a blueprint of the page's structure, allowing developers to manipulate its elements dynamically.

On the other hand, the Window object represents the browser window or frame that contains the web page. 
It acts as the global object for JavaScript in the browser environment, encompassing functionalities related to the browser window itself rather than the content within it. 
Global variables, functions, and objects are attached to the Window object, making them accessible across the entire browser window.

 2. DOM Manipulation vs. Browser Interaction:

One of the primary purposes of the Document object is DOM manipulation. 
Developers leverage methods and properties provided by the Document object to access, modify, or create elements within the HTML document dynamically. 
Methods like `getElementById`, `querySelector`, `createElement`, and more empower developers to manipulate the structure and content of the web page based on user interactions or other events.

In contrast, the Window object facilitates interaction with the browser environment. 
It provides methods for actions such as opening new browser windows (`open`), closing windows (`close`), displaying alerts (`alert`), confirming actions (`confirm`), and prompting users for input (`prompt`). 
These methods enable developers to control various aspects of the browser window and enhance user experience through interactive elements.

 3. Event Handling:

Both the Document and Window objects support event handling, but they operate at different levels of the browser environment. 
The Document object allows developers to attach event listeners to specific elements within the HTML document, responding to user interactions or changes in the document's state. 
Common events include 'click', 'mouseover', 'keydown', and more.

Similarly, the Window object enables event handling for browser-level events, such as 'load', 'resize', 'scroll', and 'unload'. 
These events pertain to the entire browser window rather than specific elements within the document. 
Developers can utilize event listeners attached to the Window object to execute code in response to changes in the browser's state or user actions that affect the window as a whole.

 4. Navigation and Location:

While both objects offer functionalities related to navigation, they operate in different contexts. 
The Document object provides limited control over navigation within the same window or frame. 
Developers can access the `location` property of the Document object to get or set the URL of the current page, enabling basic navigation within the document.

In contrast, the Window object offers comprehensive control over navigation within the browser window. 
Developers can manipulate the browser's history, navigate to different URLs, open new windows or tabs, and control the behavior of hyperlinks through methods like `history`, `location`, and `open`. 
This extensive navigation control is essential for building dynamic and interactive web applications.

 5. Global Scope and Variable Management:

As the global object in the browser environment, the Window object plays a crucial role in managing global variables, functions, and objects. 
Variables declared without the 'var', 'let', or 'const' keywords become properties of the Window object, making them accessible globally within the browser window. 
This global scope extends across all scripts and modules loaded within the window.

In contrast, the Document object does not serve as the global scope for JavaScript. 
While it provides access to elements within the HTML document, variables and functions declared within the document's scope are not automatically attached to the Document object. 
Instead, they remain within the scope of the document, encapsulated within its boundaries.

 Conclusion:

In the vast landscape of JavaScript, the Document and Window objects stand as pillars of web development, each with its distinct purpose and functionality. 
Understanding the differences between these two objects is essential for harnessing their power and building immersive web experiences. 
By mastering the nuances of the Document and Window objects, developers can unlock new possibilities and create dynamic, interactive web applications that captivate users worldwide.